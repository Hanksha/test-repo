{
    "comments": "This Gloop service ensures that the connection pool for the pool `poolName` exists and is started. It also creates the necessary tables if they don't exist yet.",
    "input": [
        {
            "name": "poolName"
        }
    ],
    "steps": [
        {
            "type": "invokeCode",
            "comments": "Returns a JDBCConnectionPoolInfo if the database connection exists, if not, it will create a new HSQL database for the provided connectionPoolName",
            "className": "io.toro.martini.DatabaseConnectionPoolMethods",
            "methodName": "getSystemConnectionPoolInfo",
            "parameters": [
                "java.lang.String"
            ],
            "inputs": [
                {
                    "from": [
                        "poolName"
                    ],
                    "to": [
                        "name"
                    ]
                }
            ]
        },
        {
            "type": "invokeCode",
            "className": "io.toro.martini.DatabaseConnectionPoolMethods",
            "methodName": "startPool",
            "parameters": [
                "java.lang.String"
            ],
            "inputs": [
                {
                    "from": [
                        "poolName"
                    ],
                    "to": [
                        "name"
                    ]
                }
            ]
        },
        {
            "type": "block",
            "blockType": "TRY_CATCH",
            "children": [
                {
                    "type": "fork",
                    "expression": "poolName",
                    "children": [
                        {
                            "type": "invokeCode",
                            "label": "conversion_sample",
                            "className": "io.toro.martini.SqlMethods",
                            "methodName": "sql",
                            "parameters": [
                                "java.lang.String",
                                "groovy.lang.Closure"
                            ],
                            "inputs": [
                                {
                                    "from": [
                                        "poolName"
                                    ],
                                    "to": [
                                        "poolName"
                                    ]
                                },
                                {
                                    "type": "set",
                                    "expression": "{ sql ->\n\tsql.execute\"\"\"\n\t\tCREATE TABLE IF NOT EXISTS texts (\n\t\t    id INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL PRIMARY KEY,\n\t\t    blob_column BLOB NULL,\n\t\t    clob_column CLOB NULL\n        );\n\t\"\"\"\n}",
                                    "evaluate": true,
                                    "to": [
                                        "c"
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "invokeCode",
                            "label": "$else",
                            "comments": "Invoke the SQL query provided in the closure 'c'. In this step, it will create two tables if it doesn't exist yet",
                            "className": "io.toro.martini.SqlMethods",
                            "methodName": "sql",
                            "parameters": [
                                "java.lang.String",
                                "groovy.lang.Closure"
                            ],
                            "inputs": [
                                {
                                    "from": [
                                        "poolName"
                                    ],
                                    "to": [
                                        "poolName"
                                    ]
                                },
                                {
                                    "type": "set",
                                    "expression": "{ sql ->\n\tsql.execute \"\"\"\nCREATE TABLE IF NOT EXISTS NAMES(\n    id integer generated by default as identity (start with 1\n             increment by 1) not null primary key,\n    first_name VARCHAR(50) NOT NULL,\n    last_name  VARCHAR(50) NOT NULL\n);\nCREATE TABLE IF NOT EXISTS ADDITIONAL_DATA(\n    id integer generated by default as identity (start with 1\n             increment by 1) not null primary key,\n    image BLOB NULL,\n    information CLOB NULL,\n\tname_id integer NOT NULL,\n\tconstraint fk_name_id foreign key (name_id) references names (id)\n);\n\"\"\"\n}",
                                    "evaluate": true,
                                    "to": [
                                        "c"
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            "catch": [
                {
                    "type": "invokeCode",
                    "comments": "Send an error message to the underlying log engine, if info messages are enabled for loggerName",
                    "className": "io.toro.martini.LoggerMethods",
                    "methodName": "error",
                    "parameters": [
                        "java.lang.String",
                        "java.lang.String"
                    ],
                    "inputs": [
                        {
                            "type": "set",
                            "expression": "ExampleSqlServicesStartup",
                            "to": [
                                "loggerName"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "\"Error Occurred During Startup: ${$gloopException.message} : ${$gloopException.realException}\"",
                            "evaluate": true,
                            "to": [
                                "message"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}