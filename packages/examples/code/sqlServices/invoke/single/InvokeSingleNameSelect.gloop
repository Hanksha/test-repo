{
    "comments": "# [Using a Gloop SQL Service to Fetch a Record](https://docs.torocloud.com/martini/latest/quick-start/resources/examples-package/sql-services/)\n\nThis [Gloop service](https://docs.torocloud.com/martini/latest/developing/gloop/service/) retrieves an entry from the `NAME` table based on given a ID. When a match is found, the record is returned.\n\nIt invokes a [Gloop SQL service](https://docs.torocloud.com/martini/latest/developing/gloop/sql/) to communicate with the database.\n\n## Invoking the Service\n\nUsing the [Gloop Service editor](https://docs.torocloud.com/martini/latest/developing/gloop/service/editor/) is the fastest way to [run this service](https://docs.torocloud.com/martini/latest/developing/gloop/service/running/).\n\nOnly the `id` is required by the service as [input](https://docs.torocloud.com/martini/developing/services/overview/input-output/). To ensure a successful search, use an ID from `1` to `4`. Records with these IDs are created upon package startup.\n\n## Expected Output\n\nThis service's return value, if represented in JSON, would look something like below:\n\n```\n{\n    \"name\": {\n        \"id\": 1,\n        \"firstName\": \"Jack\",\n        \"lastName\": \"Baker\"\n    }\n}\n```\n\n[Service outputs can be viewed in the Console view](https://docs.torocloud.com/martini/latest/developing/gloop/service/running/#outputs). Aside from the JSON format like above, it can also be viewed in XML or in a value tree.\n\n### Logs\n\nA [console message](https://docs.torocloud.com/martini/latest/setup-and-administration/monitoring/logs/#console-view) like the following is expected when executing this service:\n\n```\nINFO  [Martini] Found the requested name using id 1:\n{\n    \"name\": {\n        \"id\": 1,\n        \"firstName\": \"Jack\",\n        \"lastName\": \"Baker\"\n    }\n}\n```\n\nIf this is the first service to be invoked in a newly installed Martini instance, the following logs would be shown before the logs above:\n\n```\nINFO  [JndiBindingDataSourceManager] Successfully bound datasource to 'java:comp/env/jdbc/example_db'\nINFO  [JndiBindingDataSourceManager] Successfully bound datasource to 'java:comp/env/jdbc/example_xa_db_migrated'\nINFO  [JndiBindingDataSourceManager] Successfully bound datasource to 'java:comp/env/jdbc/conversion_sample'\nINFO  [Martini] Creating default Martini user named Demo\nINFO  [Martini] Creating default Martini user group named 'Rule 1 GROUP' and assign user 'Demo' in it\nINFO  [Martini] Creating default Martini monitor rule named Rule 1\nINFO  [Martini] Creating default Martini user named DemoII\nINFO  [Martini] Creating default Martini user group named 'Rule 2 GROUP' and assign user 'DemoII' in it\nINFO  [Martini] Creating default Martini monitor rule named Rule 2\n```\n\nThis happens due to Martini setting up required dependencies. This only happens once. If the dependencies are already set up, then you won't be seeing these anymore.",
    "input": [
        {
            "name": "id",
            "type": "integer",
            "defaultValue": 1
        }
    ],
    "output": [
        {
            "name": "name",
            "type": "model",
            "reference": "sqlServices.model.Name"
        }
    ],
    "steps": [
        {
            "type": "block",
            "blockType": "TRY_CATCH",
            "children": [
                {
                    "type": "invokeGloop",
                    "name": "util.CheckDependency"
                },
                {
                    "type": "invokeGloop",
                    "name": "sqlServices.sql.single.SelectSingleName",
                    "inputs": [
                        {
                            "from": [
                                "id"
                            ],
                            "to": [
                                "selectSingleNameInput",
                                "id"
                            ]
                        }
                    ],
                    "outputs": [
                        {
                            "from": [
                                "selectSingleNameOutput",
                                "ID"
                            ],
                            "to": [
                                "name",
                                "id"
                            ]
                        },
                        {
                            "from": [
                                "selectSingleNameOutput",
                                "FIRST_NAME"
                            ],
                            "to": [
                                "name",
                                "firstName"
                            ]
                        },
                        {
                            "from": [
                                "selectSingleNameOutput",
                                "LAST_NAME"
                            ],
                            "to": [
                                "name",
                                "lastName"
                            ]
                        }
                    ]
                },
                {
                    "type": "invokeCode",
                    "className": "io.toro.martini.LoggerMethods",
                    "methodName": "info",
                    "parameters": [
                        "java.lang.String"
                    ],
                    "inputs": [
                        {
                            "type": "set",
                            "expression": "\"Found the requested name using id ${id}:\\n${name.asJson()}\"",
                            "evaluate": true,
                            "to": [
                                "message"
                            ]
                        }
                    ]
                }
            ],
            "catch": [
                {
                    "type": "invokeCode",
                    "className": "io.toro.martini.LoggerMethods",
                    "methodName": "error",
                    "parameters": [
                        "java.lang.String"
                    ],
                    "inputs": [
                        {
                            "type": "set",
                            "expression": "\"Request with id ${id} not found, make sure the id exists.\"",
                            "evaluate": true,
                            "to": [
                                "message"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}
