{
    "comments": "# [Using a Gloop Cassandra Service to select multiple records](https://docs.torocloud.com/martini/latest/quick-start/resources/examples-package/cql-services/)\n\nThis [Gloop service](https://docs.torocloud.com/martini/latest/developing/gloop/service/) returns an array of records from the `RESTAURANTS` column family in the `restaurants` keyspace in Cassandra.\n\nIt invokes a [Gloop CQL service](https://docs.torocloud.com/martini/latest/developing/gloop/service/cql/) to communicate with the database. This Gloop Cassandra service returns a [Gloop Cursor](https://docs.torocloud.com/martini/latest/developing/gloop/model/cursor/) which the service iterates over to map entries to the `restaurants` output property.\n\n## Prerequisite\n\nIf you haven't created a Cassandra [database pool](https://docs.torocloud.com/martini/setup-and-administration/data-management/database-connection-pool/adding-and-removing/#adding-a-database-connection-pool), follow these steps:\n\n1. Right click the `Databases` above and click New -> Martini Database connection.\n2. Choose `Cassandra` as its type and name it `cassandra-example`.\n3.  Fill up the form with your username and password. (Default values for both the username and password is `cassandra`)\n4. Set the contact point to where your cassandra instance is located (e.g. `localhost`)\n5. Save and start the connection pool.\n6. Execute the service `bigData/cassandra/conf/CreateCassandraDatabase.gloop` to create the database.\n\nAfter following the steps, this service should work as intended. \n\n## Invoking the service\n\nUsing the [Gloop Service Editor](https://docs.torocloud.com/martini/latest/developing/gloop/service/editor/) is the fastest way to [run this service](https://docs.torocloud.com/martini/latest/developing/gloop/service/running/).\n\n## Expected Output\n\nThe output of this service depends on the entries in the `RESTAURANTS` column family. If you want to have the same entries as described below, you should run `bigData/cassandra/services/batch/InsertRestaurants.gloop`. Doing so will ensure your database contains only the initial data.\n\n### Properties\n\nThis service's return value, if represented in JSON, would look something like below:\n```\n{\n    \"restaurant\": [\n        {\n            \"address\": {\n                \"building\": \"1921\",\n                \"coord\": [\n                    -73.9539362,\n                    40.6107492\n                ],\n                \"street\": \"Kings Highway\",\n                \"zipcode\": \"11229\"\n            },\n            \"borough\": \"Brooklyn\",\n            \"cuisine\": \"Bagels/Pretzels\",\n            \"grades\": [\n                {\n                    \"date\": \"2014-10-01T08:00:00+0800\",\n                    \"grade\": \"A\",\n                    \"score\": 10\n                },\n                {\n                    \"date\": \"2014-03-10T08:00:00+0800\",\n                    \"grade\": \"A\",\n                    \"score\": 2\n                },\n                {\n                    \"date\": \"2013-09-24T08:00:00+0800\",\n                    \"grade\": \"A\",\n                    \"score\": 9\n                },\n                {\n                    \"date\": \"2012-10-04T08:00:00+0800\",\n                    \"grade\": \"A\",\n                    \"score\": 8\n                },\n                {\n                    \"date\": \"2012-05-29T08:00:00+0800\",\n                    \"grade\": \"A\",\n                    \"score\": 8\n                },\n                {\n                    \"date\": \"2012-01-06T08:00:00+0800\",\n                    \"grade\": \"A\",\n                    \"score\": 12\n                }\n            ],\n            \"name\": \"Highway Bagels\",\n            \"restaurant_id\": 40424410\n        },\n        ...\n```\n\n[Service outputs can be viewed in the Console view](https://docs.torocloud.com/martini/latest/developing/gloop/service/running/#outputs). Aside from the JSON format like above, it can also be viewed in XML or in a value tree.",
    "output": [
        {
            "name": "restaurant",
            "type": "model",
            "array": true,
            "gloopProperties": [
                {
                    "name": "address",
                    "type": "model",
                    "gloopProperties": [
                        {
                            "name": "building"
                        },
                        {
                            "name": "coord",
                            "type": "bigDecimal",
                            "array": true
                        },
                        {
                            "name": "street"
                        },
                        {
                            "name": "zipcode"
                        }
                    ]
                },
                {
                    "name": "borough"
                },
                {
                    "name": "cuisine"
                },
                {
                    "name": "grades",
                    "type": "model",
                    "array": true,
                    "gloopProperties": [
                        {
                            "name": "date",
                            "type": "date"
                        },
                        {
                            "name": "grade"
                        },
                        {
                            "name": "score",
                            "type": "bigDecimal"
                        }
                    ]
                },
                {
                    "name": "name"
                },
                {
                    "name": "restaurant_id",
                    "type": "bigDecimal"
                }
            ]
        }
    ],
    "steps": [
        {
            "type": "invokeGloop",
            "comments": "Invokes the CQL query to produce the inputCursor",
            "name": "bigData.cassandra.cql.batch.SelectRestaurants",
            "declare": [
                {
                    "variables": [
                        {
                            "name": "inputCursor",
                            "type": "model",
                            "array": true,
                            "allowExtraProperties": true
                        }
                    ]
                }
            ],
            "outputs": [
                {
                    "from": [
                        "inputCursor"
                    ],
                    "to": [
                        "inputCursor"
                    ]
                }
            ]
        },
        {
            "type": "iterate",
            "comments": "Iterates over the inputCursor and the restaurant model to be mapped",
            "input": {
                "path": [
                    "inputCursor"
                ]
            },
            "output": {
                "path": [
                    "restaurant"
                ]
            },
            "children": [
                {
                    "comments": "Maps the inputCursor to the restaurant model",
                    "lines": [
                        {
                            "type": "set",
                            "expression": "inputCursor.address.building",
                            "evaluate": true,
                            "to": [
                                "restaurant",
                                "address",
                                "building"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "[inputCursor.address.coord.tupleEntry0,inputCursor.address.coord.tupleEntry1]",
                            "evaluate": true,
                            "to": [
                                "restaurant",
                                "address",
                                "coord"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "inputCursor.address.street",
                            "evaluate": true,
                            "to": [
                                "restaurant",
                                "address",
                                "street"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "inputCursor.address.zipcode",
                            "evaluate": true,
                            "to": [
                                "restaurant",
                                "address",
                                "zipcode"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "inputCursor.borough",
                            "evaluate": true,
                            "to": [
                                "restaurant",
                                "borough"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "inputCursor.cuisine",
                            "evaluate": true,
                            "to": [
                                "restaurant",
                                "cuisine"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "inputCursor.name",
                            "evaluate": true,
                            "to": [
                                "restaurant",
                                "name"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "inputCursor.restaurant_id",
                            "evaluate": true,
                            "to": [
                                "restaurant",
                                "restaurant_id"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "[inputCursor.grades]",
                            "evaluate": true,
                            "to": [
                                "restaurant",
                                "grades"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}