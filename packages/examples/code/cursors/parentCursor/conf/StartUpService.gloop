{
    "comments": "This Gloop service will prepare the needed database connection pool and schema so the [Gloop cursors example service](https://docs.torocloud.com/martini/latest/quick-start/resources/examples-package/cursors) can be invoked easily.",
    "steps": [
        {
            "comments": "Declare a property string `poolName` and set a value to it.",
            "declare": [
                {
                    "variables": [
                        {
                            "name": "poolName"
                        }
                    ]
                }
            ],
            "lines": [
                {
                    "type": "set",
                    "expression": "example_db",
                    "to": [
                        "poolName"
                    ]
                }
            ]
        },
        {
            "type": "invokeCode",
            "comments": "In this step, we are using the one-liner method `getSystemConnectionPoolInfo` which will get the information of the system datasource, if it doesn't exist, it will be created.",
            "className": "io.toro.martini.DatabaseConnectionPoolMethods",
            "methodName": "getSystemConnectionPoolInfo",
            "parameters": [
                "java.lang.String"
            ],
            "inputs": [
                {
                    "from": [
                        "poolName"
                    ],
                    "to": [
                        "name"
                    ]
                }
            ]
        },
        {
            "type": "block",
            "blockType": "TRY_CATCH",
            "children": [
                {
                    "type": "invokeCode",
                    "comments": "This step will create two database tables, `country` and `subdivision`.",
                    "className": "io.toro.martini.SqlMethods",
                    "methodName": "sql",
                    "parameters": [
                        "java.lang.String",
                        "groovy.lang.Closure"
                    ],
                    "inputs": [
                        {
                            "from": [
                                "poolName"
                            ],
                            "to": [
                                "poolName"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "{ sql ->\n\tsql.execute \"\"\"\n\t\tCREATE TABLE IF NOT EXISTS country (\n\t\t\tcountry_id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL PRIMARY KEY,\n\t\t\tcountry_code VARCHAR(10) UNIQUE NOT NULL,\n\t\t\tname VARCHAR(50) NOT NULL,\n\t\t)\n\t\tCREATE TABLE IF NOT EXISTS subdivision (\n\t\t\tsubdivision_id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL PRIMARY KEY,\n\t\t\tsubdivision_code VARCHAR(10) NOT NULL,\n\t\t\tname VARCHAR(50) NOT NULL,\n\t\t\tlevel VARCHAR(50) NOT NULL,\n\t\t\tcountry_code VARCHAR(10) NOT NULL,\n\t\t\tconstraint fk_country_code FOREIGN KEY(country_code) REFERENCES country(country_code)\n\t\t)\n\t\"\"\"\n}",
                            "to": [
                                "c"
                            ]
                        }
                    ]
                }
            ],
            "catch": [
                {
                    "type": "invokeCode",
                    "className": "io.toro.martini.GloopMethods",
                    "methodName": "throwException",
                    "parameters": [
                        "java.lang.String"
                    ],
                    "inputs": [
                        {
                            "from": [
                                "$gloopException",
                                "message"
                            ],
                            "to": [
                                "message"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}