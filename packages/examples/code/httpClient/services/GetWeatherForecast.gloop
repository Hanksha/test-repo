{
    "comments": "# [Making HTTP Calls in Gloop](https://docs.torocloud.com/martini/latest/quick-start/resources/examples-package/http-client/)\n\nThis service sends a `GET` request to the `<host>:<port>/<api.rest.base-path>/sample/mock-api/forecast/{city}/{country}` endpoint, and returns said endpoint's response using the `responseCode` and `getWeatherForecastOutput` output properties.\n\nThis service was generated using the [HTTP Client Service wizard](https://docs.torocloud.com/martini/latest/developing/gloop/service/generating/#from-an-http-request). Further modifications were made in order to support error handling.\n\nThe HTTP operation called by this service is exposed by `httpClient.mockApis.HttpClientMockEndpoints.api`, and only provides mock data. \n\n## Invoking the Service\n\nUsing the [Gloop Service editor](https://docs.torocloud.com/martini/latest/developing/gloop/service/editor/) is the fastest way to [run this service](https://docs.torocloud.com/martini/latest/developing/gloop/service/running/). Three [inputs](https://docs.torocloud.com/martini/developing/services/overview/input-output/) are required: `city` and `countryCode`. You can either set these values with your own custom values, or use the default values already provided.\n\t\n## Expected Output\n\nThis service returns three properties: `responseCode`, `getWeatherForecastOutput`, and `output`. Its output should be fairly similar to below (if represented in JSON):\n\n```\n{\n    \"responseCode\": 200,\n    \"GetWeatherForecastOutput\": {\n        \"city\": \"Manila\",\n        \"country\": \"PH\",\n        \"daily\": {\n            \"summary\": \"Clear sky throughout the week, with temperatures peaking at 41.5\\u00B0C on Thursday.\",\n            \"data\": [\n                {\n                    \"summary\": \"Scattered clouds in the afternoon.\",\n                    \"temperatureHigh\": 27.5,\n                    \"temperatureLow\": 25.9\n                },\n                {\n                    \"summary\": \"Clear sky in the morning.\",\n                    \"temperatureHigh\": 34.1,\n                    \"temperatureLow\": 24.6\n                },\n                {\n                    \"summary\": \"Broken clouds throughout the day.\",\n                    \"temperatureHigh\": 28.7,\n                    \"temperatureLow\": 28.6\n                },\n                {\n                    \"summary\": \"Clear sky in the morning.\",\n                    \"temperatureHigh\": 41.5,\n                    \"temperatureLow\": 38.0\n                },\n                {\n                    \"summary\": \"Rain in the afternoon.\",\n                    \"temperatureHigh\": 38.7,\n                    \"temperatureLow\": 32.6\n                },\n                {\n                    \"summary\": \"Shower rain in the afternoon.\",\n                    \"temperatureHigh\": 34.3,\n                    \"temperatureLow\": 32.5\n                },\n                {\n                    \"summary\": \"Scattered clouds in the morning.\",\n                    \"temperatureHigh\": 38.3,\n                    \"temperatureLow\": 36.5\n                }\n            ]\n        }\n    },\n    \"output\": {\n        \"message\": \"Gloop Service Completed.\"\n    }\n}\n```\n\n[Outputs can be viewed in the Console view](https://docs.torocloud.com/martini/latest/developing/gloop/service/running/#outputs). Service outputs can also be viewed in XML, or in a model tree.",
    "input": [
        {
            "name": "city",
            "defaultValue": "Manila",
            "comments": "City to get the weather from"
        },
        {
            "name": "countryCode",
            "defaultValue": "PH",
            "comments": "The 2 letter country code where the city belongs"
        }
    ],
    "output": [
        {
            "name": "responseCode",
            "type": "integer",
            "comments": "Response code of the request"
        },
        {
            "name": "getWeatherForecastOutput",
            "type": "model",
            "comments": "Gloop model containing the response of the Dark Sky API",
            "reference": "httpClient.model.GetWeatherForecastOutput"
        },
        {
            "name": "output",
            "type": "model",
            "gloopProperties": [
                {
                    "name": "message",
                    "defaultValue": "Gloop Service Completed."
                }
            ]
        }
    ],
    "steps": [
        {
            "type": "block",
            "comments": "We add a try/catch block to catch any exceptions thrown by the http call",
            "blockType": "TRY_CATCH",
            "children": [
                {
                    "type": "invokeCode",
                    "comments": "We send the GET request here and map the response content to the GetWeatherForecastOutput Gloop model.\n\nSince the parameters are included in the URL path, we set the url by using GString and checking the evaluate to inject the Gloop Service inputs.",
                    "className": "io.toro.martini.HttpMethods",
                    "methodName": "http",
                    "parameters": [
                        "io.toro.gloop.object.property.GloopModel",
                        "io.toro.gloop.object.property.GloopModel",
                        "java.lang.String",
                        "java.lang.String",
                        "boolean",
                        "io.toro.gloop.object.property.GloopModel",
                        "io.toro.gloop.engine.GloopExecutionContext"
                    ],
                    "inputs": [
                        {
                            "type": "set",
                            "expression": "GloopObject",
                            "to": [
                                "returnAs"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "Auto Detect",
                            "to": [
                                "responseType"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "\"${'host.url'.getPackageProperty()}:${'server.http.port'.getApplicationProperty()}/api/sample/mock-api/forecast/${city}/${countryCode}\"",
                            "evaluate": true,
                            "to": [
                                "request",
                                "uri"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "GET",
                            "to": [
                                "request",
                                "method"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "GloopObject",
                            "to": [
                                "returnAs"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "true",
                            "to": [
                                "throwHttpExceptions"
                            ]
                        }
                    ],
                    "outputs": [
                        {
                            "from": [
                                "response",
                                "content"
                            ],
                            "to": [
                                "getWeatherForecastOutput"
                            ]
                        },
                        {
                            "from": [
                                "response",
                                "responseCode"
                            ],
                            "to": [
                                "responseCode"
                            ]
                        }
                    ]
                }
            ],
            "catch": [
                {
                    "comments": "If there are any exceptions, we set the exception message to the message output string",
                    "lines": [
                        {
                            "from": [
                                "$gloopException",
                                "message"
                            ],
                            "to": [
                                "getWeatherForecastOutput",
                                "error"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "500",
                            "to": [
                                "responseCode"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}